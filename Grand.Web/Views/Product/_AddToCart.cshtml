@model ProductDetailsModel.AddToCartModel
@if (!String.IsNullOrEmpty(Model.UpdatedShoppingCartItemId))
{
    <input asp-for="UpdatedShoppingCartItemId" type="hidden" />
}
@if (Model.CustomerEntersPrice)
{
    <div class="customer-entered-price mb-3 d-flex w-100 flex-column">
        <div class="price-input">
            <label asp-for="CustomerEnteredPrice" class="enter-price-label">@("Products.EnterProductPrice"):</label>
            @*round price*@
            <input asp-for="CustomerEnteredPrice" value="@Convert.ToInt32(Math.Ceiling(Model.CustomerEnteredPrice))" class="form-control enter-price-input" />
        </div>
        <div class="price-range pt-1">
            @Model.CustomerEnteredPriceRange
        </div>
    </div>
}
@if (!Model.DisableBuyButton || Model.CustomerEntersPrice)
{

    if (!String.IsNullOrEmpty(Model.MinimumQuantityNotification))
    {
        <div class="min-qty-notification text-danger col-12 px-0">@Model.MinimumQuantityNotification</div>
    }
    if (!Model.DisableBuyButton)
    {

        {
            var addToCartText = "";
            if (!String.IsNullOrEmpty(Model.UpdatedShoppingCartItemId) && Model.UpdateShoppingCartItemType.HasValue && Model.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
            {
                addToCartText = T("ShoppingCart.AddToCart.Update").Text;
            }
            else
            {
                addToCartText = T("ShoppingCart.AddToCart").Text;
                if (Model.IsReservation)
                {
                    addToCartText = T("ShoppingCart.Reservation").Text;
                }
                if (Model.AvailableForPreOrder)
                {
                    addToCartText = T("ShoppingCart.PreOrder").Text;
                }
                if (Model.IsAuction)
                {
                    addToCartText = T("ShoppingCart.BuyNow").Text;
                }
            }

            @*<button type="button" id="add-to-cart-button-@Model.ProductId" class="btn btn-info add-to-cart-button d-inline-flex" data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })', '#product-details-form');return false;">
                    <span class="fa fa-shopping-cart d-sm-block"></span><span class="d-lg-block d-none">@addToCartText</span>
                </button>*@
            <a href="https://docs.google.com/forms/d/e/1FAIpQLScCpEWYI3qyNDLvpxWFQm__b3FIbOnBIuGtKqmyGrjCD5MdWg/viewform?usp=sf_link" target="_blank" class="btn btn-primary">
                <span class="fa fa-shopping-cart d-sm-block"></span><span class="d-lg-block d-none">@addToCartText</span>
            </a>
        }

    }

    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_add_info" })

}
